#+TITLE: PyPSA: Python for Power System Analysis

* About

PyPSA stands for "Python for Power System Analysis". It is pronounced
"pipes-ah".

PyPSA is a [[http://www.gnu.org/philosophy/free-sw.en.html][free software]] toolbox for simulating and optimising modern
power systems that include features such as conventional generators
with unit commitment, variable wind and solar generation, storage
units, coupling to other energy sectors, and mixed alternating and direct current
networks. PyPSA is designed to scale well with large networks and long
time series.

As of 2018 PyPSA is under heavy development and therefore it is
recommended to use caution when using it in a production environment.
Some APIs may change - the changes in each PyPSA version are listed in
the [[./doc/release_notes.html][release notes]].

PyPSA was initially developed by the
[[https://fias.uni-frankfurt.de/physics/schramm/renewable-energy-system-and-network-analysis/][Renewable
Energy Group]] at [[https://fias.uni-frankfurt.de/][FIAS]] to carry out
simulations for the [[http://condynet.de/][CoNDyNet project]], financed
by the [[https://www.bmbf.de/en/index.html][German Federal Ministry for
Education and Research (BMBF)]] as part of the
[[http://forschung-stromnetze.info/projekte/grundlagen-und-konzepte-fuer-effiziente-dezentrale-stromnetze/][Stromnetze
Research Initiative]].

* Download

See the [[./doc/installation.html][installation instructions]].

You can also see/download the code directly from
[[https://github.com/PyPSA/PyPSA][github]].

* Documentation

[[./doc/index.html][Documentation as a website]]

[[./doc/PyPSA.pdf][Documentation as a PDF]]

[[./doc/quick_start.html][Quick start]]

[[./examples/index.html][Examples]]

* What PyPSA does and does not do (yet)

PyPSA can calculate:

-  static power flow (using both the full non-linear network equations
   and the linearised network equations)
-  linear optimal power flow (least-cost optimisation of power plant and storage
   dispatch within network constraints, using the linear network
   equations, over several snapshots)
-  security-constrained linear optimal power flow
-  total electricity/energy system least-cost investment optimisation (using linear
   network equations, over several snapshots simultaneously for
   optimisation of generation and storage dispatch and investment in the
   capacities of generation, storage, transmission and other infrastructure)

It has models for:

-  meshed multiply-connected AC and DC networks, with controllable
   converters between AC and DC networks
-  standard types for lines and transformers following the
   implementation in
   [[https://www.uni-kassel.de/eecs/fachgebiete/e2n/software/pandapower.html][pandapower]]
-  conventional dispatchable generators with unit commitment
-  generators with time-varying power availability, such as wind and
   solar generators
-  storage units with efficiency losses
-  simple hydroelectricity with inflow and spillage
-  coupling with other energy carriers
-  basic components out of which more complicated assets can be built,
   such as Combined Heat and Power (CHP) units, heat pumps, resistive
   Power-to-Heat (P2H), Power-to-Gas (P2G), battery electric vehicles
   (BEVs), etc.; each of these is demonstrated in the
   [[./examples/index.html][examples]]

Functionality that will definitely be added soon:

-  Multi-year investment optimisation
-  Simple RMS simulations with the swing equation
-  Distributed active power slack
-  Non-linear power flow solution using
   [[https://en.wikipedia.org/wiki/Holomorphic_embedding_load_flow_method][analytic
   continuation]] in the complex plane following
   [[https://github.com/SanPen/GridCal][GridCal]]

Functionality that may be added in the future:

-  Short-circuit current calculations
-  Dynamic RMS simulations
-  Small signal stability analysis
-  Interactive web-based GUI with SVG
-  OPF with the full non-linear network equations
-  Dynamic EMT simulations
-  Unbalanced load flow
-  Port to [[http://julialang.org/][Julia]]


* Example scripts as Jupyter notebooks

There are [[./examples/index.html][extensive examples]] available as Jupyter notebooks.


* Screenshots



Results from a PyPSA simulation can be converted into an interactive
online animation using [[https://github.com/PyPSA/PyPSA-animation][PyPSA-animation]], see the [[https://www.pypsa.org/animations/pypsa-eur-30/][PyPSA-Eur-30 example]].


Another showcase for PyPSA is the [[https://pypsa.org/examples/scigrid-lopf-then-pf-plotly.html][SciGRID example]] which demonstrates
interactive plots generated with the [[https://plot.ly/python/][plotly]] library.


#+CAPTION: Line loading with high wind feed-in in North Germany.
[[./img/line-loading.png]]

#+CAPTION: Nodal prices with high wind feed-in in North Germany.
[[./img/lmp.png]]


#+CAPTION: Reactive power in Germany.
[[./img/reactive-power.png]]

#+CAPTION: Aggregated feed-in over a day.
#+ATTR_HTML: :width 700px
[[./img/stacked-gen.png]]

#+CAPTION: Storage operation.
#+ATTR_HTML: :width 700px
[[./img/storage-scigrid.png]]

#+CAPTION: Curtailment of wind.
#+ATTR_HTML: :width 700px
[[./img/scigrid-curtailment.png]]

#+CAPTION: Meshed AC-DC hybrid nework.
[[./img/meshed-ac-dc.png]]

#+CAPTION: Optimised capacities of generation and storage for a 95% reduction in CO2 emissions in Europe compare to 1990 levels.
#+NAME: fig:investment
#+ATTR_HTML: :width 700px
[[./img/euro-pie-pre-7-branch_limit-1-256.png]]

[[./img/legend-flat.png]]

* What PyPSA uses under the hood

PyPSA is written and tested to be compatible with both Python 2.7 and
Python 3.5.

It leans heavily on the following Python packages:

-  [[http://pandas.pydata.org/][pandas]] for storing data about components and time series
-  [[http://www.numpy.org/][numpy]] and [[http://scipy.org/][scipy]] for calculations, such as linear algebra and sparse
   matrix calculations
-  [[http://www.pyomo.org/][pyomo]] for preparing optimisation problems (currently only linear)
-  [[https://plot.ly/python/][plotly]] for interactive plotting
-  [[https://matplotlib.org/][matplotlib]] for static plotting
-  [[https://networkx.github.io/][networkx]] for some network calculations
-  [[http://pytest.org/][py.test]] for unit testing
-  [[https://docs.python.org/3/library/logging.html][logging]] for managing messages

The optimisation uses pyomo so that it is independent of the preferred
solver (you can use e.g. the free software GLPK or the commercial
software Gurobi).

The time-expensive calculations, such as solving sparse linear
equations, are carried out using the scipy.sparse libraries.

* Mailing list

PyPSA has a Google Group [[https://groups.google.com/group/pypsa][forum
/ mailing list]].




* Citing PyPSA


If you use PyPSA for your research, we would appreciate it if you
would cite the following paper:

- T. Brown, J. H\ouml{}rsch, D. Schlachtberger, [[https://arxiv.org/abs/1707.09913][PyPSA: Python for
  Power System Analysis]], 2018, [[https://openresearchsoftware.metajnl.com/][Journal of Open Research Software]], 6(1),
  [[https://arxiv.org/abs/1707.09913][arXiv:1707.09913]], [[https://doi.org/10.5334/jors.188][DOI: 10.5334/jors.188]]


Please use the following BibTeX:

#+BEGIN_SRC
   @article{PyPSA,
      author = {T. Brown and J. H\"orsch and D. Schlachtberger},
      title = {{PyPSA: Python for Power System Analysis}},
      journal = {Journal of Open Research Software},
      volume = {6},
      issue = {1},
      number = {4},
      year = {2018},
      eprint = {1707.09913},
      url = {https://doi.org/10.5334/jors.188},
      doi = {10.5334/jors.188}
   }
#+END_SRC

If you want to cite a specific PyPSA version, each release of PyPSA is
stored on [[https://zenodo.org/][Zenodo]] with a release-specific DOI.  This can be found
linked from the overall PyPSA Zenodo DOI:
[[https://doi.org/10.5281/zenodo.786605][https://zenodo.org/badge/DOI/10.5281/zenodo.786605.svg]].



* Licence

PyPSA is released as free software under the
[[http://www.gnu.org/licenses/gpl-3.0.en.html][GPLv3]].
